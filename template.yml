AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Publishes tweet sentiment analysis metrics for the given Twitter search.

Metadata:
  AWS::ServerlessRepo::Application:
    Name: tweet-sentiment
    Description: Publishes tweet sentiment analysis metrics for the given Twitter search.
    Author: James Hood
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: [twitter, tweet, sentiment, metrics]
    HomePageUrl: https://github.com/jlhood/tweet-sentiment-python
    SemanticVersion: 2.2.1
    SourceCodeUrl: https://github.com/jlhood/tweet-sentiment-python/tree/2.2.1

Parameters:
  SearchText:
    Type: String
    Description: Search text to pass to Twitter. You can experiment with the Twitter search API at https://twitter.com/search-home
    # Search text is used as a CW Logs dimension so have to keep it within the constraints of a dimension value.
    MinLength: 1
    MaxLength: 255
  PollingFrequencyInMinutes:
    Type: Number
    Description: Frequency (in minutes) to poll for new tweets.
    MinValue: 1
    Default: 5
  DashboardName:
    Type: String
    Description: CloudWatch dashboard name. If not specified, defaults to let CloudFormation name the Dashboard.
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z0-9\\-_]*$"
    Default: ''
  DashboardPeriodInSeconds:
    Type: Number
    Description: Period (in seconds) for graphs on CloudWatch dashboard. Valid values are 60 (1 minute), 300 (5 minute), or 3600 (1 hour).
    AllowedValues:
      - 60
      - 300
      - 3600
    Default: 300
  LogLevel:
    Type: String
    Description: Log level for Lambda function logging, e.g., ERROR, INFO, DEBUG, etc
    Default: INFO

Conditions:
  DashboardNameProvided:
    !Not [!Equals [!Ref DashboardName, '']]

Resources:
  TweetSentiment:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: tweetsentiment.handler
      Runtime: python3.7
      Tracing: Active
      Timeout: 60
      Policies:
        - ComprehendBasicAccessPolicy: {}
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel
          SEARCH_TEXT: !Ref SearchText

  Tweets:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:077246666028:applications/aws-serverless-twitter-event-source
        SemanticVersion: 2.0.0
      Parameters: 
        # Max number of tweets to send to the TweetProcessor lambda function on each invocation.
        BatchSize: '20' # max allowed by PutMetricData API
        # Non-URL-encoded search text poller should use when querying Twitter Search API.
        SearchText: !Sub '${SearchText} -filter:nativeretweets'
        # If true, the app will remember the last tweet found and only invoke the tweet processor function for newer tweets. If false, the app will be stateless and invoke the tweet processor function with all tweets found in each polling cycle.
        StreamModeEnabled: 'true'
        PollingFrequencyInMinutes: !Ref PollingFrequencyInMinutes
        # Name of lambda function that should be invoked to process tweets. Note, this must be a function name and not a function ARN.
        TweetProcessorFunctionName: !Ref TweetSentiment

  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !If
        - DashboardNameProvided
        - !Ref DashboardName
        - !Ref AWS::NoValue
      DashboardBody: !Sub |
        {
            "widgets": [
                {
                    "type": "metric",
                    "x": 0,
                    "y": 0,
                    "width": 24,
                    "height": 6,
                    "properties": {
                        "metrics": [
                            [ "TweetSentiment", "SentimentCount", "SearchText", "${SearchText}", "SentimentType", "Neutral" ],
                            [ "...", "Negative" ],
                            [ "...", "Positive" ],
                            [ "...", "Mixed" ]
                        ],
                        "view": "timeSeries",
                        "stacked": true,
                        "region": "${AWS::Region}",
                        "stat": "Sum",
                        "period": ${DashboardPeriodInSeconds},
                        "title": "Tweet Volume - ${SearchText}",
                        "yAxis": {
                            "left": {
                                "label": "Count",
                                "showUnits": false
                            }
                        }
                    }
                },
                {
                    "type": "metric",
                    "x": 12,
                    "y": 12,
                    "width": 12,
                    "height": 6,
                    "properties": {
                        "metrics": [
                            [ "TweetSentiment", "SentimentScore", "SearchText", "${SearchText}", "SentimentType", "Mixed" ],
                            [ "...", { "stat": "Maximum" } ],
                            [ "...", { "stat": "Minimum" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "stat": "Average",
                        "period": ${DashboardPeriodInSeconds},
                        "title": "Mixed Score - ${SearchText}",
                        "yAxis": {
                            "left": {
                                "label": "%",
                                "showUnits": false,
                                "min": 0,
                                "max": 1
                            }
                        }
                    }
                },
                {
                    "type": "metric",
                    "x": 0,
                    "y": 6,
                    "width": 12,
                    "height": 6,
                    "properties": {
                        "metrics": [
                            [ "TweetSentiment", "SentimentScore", "SearchText", "${SearchText}", "SentimentType", "Positive" ],
                            [ "...", { "stat": "Maximum" } ],
                            [ "...", { "stat": "Minimum" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "stat": "Average",
                        "period": ${DashboardPeriodInSeconds},
                        "title": "Positive Score - ${SearchText}",
                        "yAxis": {
                            "left": {
                                "label": "%",
                                "showUnits": false,
                                "min": 0,
                                "max": 1
                            }
                        }
                    }
                },
                {
                    "type": "metric",
                    "x": 12,
                    "y": 6,
                    "width": 12,
                    "height": 6,
                    "properties": {
                        "metrics": [
                            [ "TweetSentiment", "SentimentScore", "SearchText", "${SearchText}", "SentimentType", "Negative" ],
                            [ "...", { "stat": "Maximum" } ],
                            [ "...", { "stat": "Minimum" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "stat": "Average",
                        "period": ${DashboardPeriodInSeconds},
                        "title": "Negative Score - ${SearchText}",
                        "yAxis": {
                            "left": {
                                "label": "%",
                                "showUnits": false,
                                "min": 0,
                                "max": 1
                            }
                        }
                    }
                },
                {
                    "type": "metric",
                    "x": 0,
                    "y": 12,
                    "width": 12,
                    "height": 6,
                    "properties": {
                        "metrics": [
                            [ "TweetSentiment", "SentimentScore", "SearchText", "${SearchText}", "SentimentType", "Neutral" ],
                            [ "...", { "stat": "Maximum" } ],
                            [ "...", { "stat": "Minimum" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "stat": "Average",
                        "period": ${DashboardPeriodInSeconds},
                        "title": "Neutral Score - ${SearchText}",
                        "yAxis": {
                            "left": {
                                "label": "%",
                                "showUnits": false,
                                "min": 0,
                                "max": 1
                            }
                        }
                    }
                },
                {
                    "type": "log",
                    "x": 0,
                    "y": 18,
                    "width": 24,
                    "height": 4,
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${TweetSentiment}' | filter @message like /Tweet Sentiment Result/\n| parse @message '[INFO]\t*\t*\tTweet Sentiment Result: tweet_url:\"*\" Sentiment:* Positive:* Negative:* Neutral:* Mixed:*' as datetime, requestId, tweetUrl, sentiment, positive, negative, neutral, mixed\n| stats count(sentiment) as count by sentiment\n| sort count desc",
                        "region": "${AWS::Region}",
                        "title": "Sentiment Counts - ${SearchText}"
                    }
                },
                {
                    "type": "log",
                    "x": 0,
                    "y": 22,
                    "width": 24,
                    "height": 6,
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${TweetSentiment}' | filter @message like /Tweet Sentiment Result/\n| parse @message '[INFO]\t*\t*\tTweet Sentiment Result: tweet_url:\"*\" Sentiment:* Positive:* Negative:* Neutral:* Mixed:*' as datetime, requestId, tweetUrl, sentiment, positive, negative, neutral, mixed\n| filter sentiment = 'Positive'\n| sort positive desc\n| limit 10",
                        "region": "${AWS::Region}",
                        "title": "Top Positive Tweets - ${SearchText}"
                    }
                },
                {
                    "type": "log",
                    "x": 0,
                    "y": 28,
                    "width": 24,
                    "height": 6,
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${TweetSentiment}' | filter @message like /Tweet Sentiment Result/\n| parse @message '[INFO]\t*\t*\tTweet Sentiment Result: tweet_url:\"*\" Sentiment:* Positive:* Negative:* Neutral:* Mixed:*' as datetime, requestId, tweetUrl, sentiment, positive, negative, neutral, mixed\n| filter sentiment = 'Negative'\n| sort negative desc\n| limit 10",
                        "region": "${AWS::Region}",
                        "title": "Top Negative Tweets - ${SearchText}"
                    }
                }
            ]
        }

Outputs:
  TweetSentimentFunctionName:
    Description: TweetSentiment function name.
    Value: !Ref TweetSentiment
  TweetSentimentFunctionArn:
    Description: TweetSentiment function ARN.
    Value: !GetAtt TweetSentiment.Arn
  DashboardName:
    Description: CloudWatch Dashboard name.
    Value: !Ref Dashboard